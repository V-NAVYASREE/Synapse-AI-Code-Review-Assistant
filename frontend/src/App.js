import React, { useState, useEffect } from 'react';
import './App.css';
// Import the PDF generation library components
import { Document, Page, Text, View, StyleSheet, pdf } from '@react-pdf/renderer'; 

// Utility function to format timestamp
const formatDate = (timestamp) => {
    try {
        return new Date(timestamp).toLocaleString();
    } catch {
        return 'N/A';
    }
};

// --- PDF Document Structure (Using @react-pdf/renderer) ---
const styles = StyleSheet.create({
    page: {
        padding: 30,
        fontFamily: 'Helvetica',
        backgroundColor: '#ffffff',
    },
    title: {
        fontSize: 20,
        marginBottom: 10,
        color: '#4CAF50',
        borderBottom: '1px solid #4CAF50',
        paddingBottom: 5,
    },
    subtitle: {
        fontSize: 14,
        marginTop: 15,
        marginBottom: 5,
        fontWeight: 'bold',
        color: '#333',
    },
    text: {
        fontSize: 11,
        marginBottom: 3,
        color: '#222',
    },
    summaryText: {
        fontSize: 12,
        marginBottom: 10,
        lineHeight: 1.5,
        color: '#444',
    },
    suggestionItem: {
        marginBottom: 8,
        paddingLeft: 10,
        borderLeft: '2px solid #66bb6a',
    },
    bugItem: {
        marginBottom: 8,
        paddingLeft: 10,
        borderLeft: '2px solid #ef5350',
    },
    strong: {
        fontWeight: 'bold',
        color: '#222',
    }
});

const ReviewPDF = ({ report }) => (
    <Document>
        <Page size="A4" style={styles.page}>
            <Text style={styles.title}>Code Review Report: {report.filename}</Text>
            <Text style={styles.text}>Review Date: {formatDate(report.timestamp)}</Text>

            <Text style={styles.subtitle}>Summary</Text>
            <Text style={styles.summaryText}>{report.summary}</Text>

            <Text style={styles.subtitle}>Suggestions</Text>
            {Object.keys(report.suggestions).length > 0 ? (
                Object.entries(report.suggestions).map(([key, value], index) => (
                    <View key={index} style={styles.suggestionItem}>
                        <Text style={[styles.text, { color: '#060', fontWeight: 'bold' }]}>{key.replace(/_/g, ' ')}:</Text>
                        <Text style={styles.text}>{value}</Text>
                    </View>
                ))
            ) : (
                <Text style={styles.text}>No specific suggestions found.</Text>
            )}

            <Text style={styles.subtitle}>Potential Bugs</Text>
            {Object.keys(report.potential_bugs).length > 0 ? (
                Object.entries(report.potential_bugs).map(([key, value], index) => (
                    <View key={index} style={styles.bugItem}>
                        <Text style={[styles.text, { color: '#a00', fontWeight: 'bold' }]}>{key.replace(/_/g, ' ')}:</Text>
                        <Text style={styles.text}>{value}</Text>
                    </View>
                ))
            ) : (
                <Text style={styles.text}>No critical bugs found.</Text>
            )}
            
            <Text style={[styles.text, { marginTop: 50, textAlign: 'center', fontSize: 10, color: '#888' }]}>
                Report generated by Synapse AI Code Reviewer.
            </Text>
        </Page>
    </Document>
);

// --- END PDF Document Structure ---


// Component to display a single review report
const ReviewDisplay = ({ report, fetchHistory }) => {
    if (!report) return null;

    // Function to handle the download of the report as a PDF file
    const handleDownload = async () => {
        const filename = `Review_Report_${report.filename.replace(/\./g, '_')}_${new Date().toISOString().substring(0, 10)}.pdf`;
        
        const blob = await pdf(<ReviewPDF report={report} />).toBlob();
        
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    };

    // Function to handle deleting a report from history (same as before)
    const handleDelete = async (id) => {
        if (!window.confirm(`Are you sure you want to delete the report for ${report.filename}?`)) {
            return;
        }

        try {
            const response = await fetch(`http://localhost:8000/api/review/${id}`, {
                method: 'DELETE',
            });

            if (response.ok) {
                // Using a custom alert
                const customAlert = document.createElement('div');
                customAlert.innerText = `Report for ${report.filename} deleted successfully.`;
                customAlert.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #4CAF50; color: white; padding: 10px; border-radius: 5px; z-index: 10000;';
                document.body.appendChild(customAlert);
                setTimeout(() => document.body.removeChild(customAlert), 3000);
                
                if (fetchHistory) {
                    fetchHistory();
                }
            } else {
                const errorData = await response.json();
                const customAlert = document.createElement('div');
                customAlert.innerText = `Deletion failed: ${errorData.detail || 'Server error'}`;
                customAlert.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #f44336; color: white; padding: 10px; border-radius: 5px; z-index: 10000;';
                document.body.appendChild(customAlert);
                setTimeout(() => document.body.removeChild(customAlert), 4000);
            }
        } catch (err) {
            console.error(err);
            const customAlert = document.createElement('div');
            customAlert.innerText = "Could not connect to backend to perform deletion.";
            customAlert.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #ff9800; color: white; padding: 10px; border-radius: 5px; z-index: 10000;';
            document.body.appendChild(customAlert);
            setTimeout(() => document.body.removeChild(customAlert), 4000);
        }
    };


    return (
        <div className="report-card">
            <h3 className="report-title">
                Review Report for "{report.filename}" 
                {report.timestamp && <span className="timestamp"> (on {formatDate(report.timestamp)})</span>}
                
                <div className="report-actions">
                    <button 
                        onClick={handleDownload} 
                        className="download-button"
                        title="Download Report as PDF"
                    >
                        Download PDF
                    </button>
                    {report.id && (
                        <button 
                            onClick={() => handleDelete(report.id)} 
                            className="delete-button"
                            title="Delete Report Permanently"
                        >
                            Delete
                        </button>
                    )}
                </div>
            </h3>
            
            <div className="section-summary">
                <h4>Summary:</h4>
                <p>{report.summary}</p>
            </div>

            <div className="review-sections">
                <div className="suggestion-section">
                    <h4>Suggestions:</h4>
                    {Object.keys(report.suggestions).length > 0 ? (
                        <ul>
                            {Object.keys(report.suggestions).map((key, index) => (
                                <li key={index}>
                                    <strong>{key.replace(/_/g, ' ')}:</strong> {report.suggestions[key]}
                                </li>
                            ))}
                        </ul>
                    ) : (
                        <p className="no-feedback">No specific suggestions found.</p>
                    )}
                </div>

                <div className="bug-section">
                    <h4>Potential Bugs:</h4>
                    {Object.keys(report.potential_bugs).length > 0 ? (
                        <ul>
                            {Object.keys(report.potential_bugs).map((key, index) => (
                                <li key={index}>
                                    <strong>{key.replace(/_/g, ' ')}:</strong> {report.potential_bugs[key]}
                                </li>
                            ))}
                        </ul>
                    ) : (
                        <p className="no-feedback">No critical bugs found.</p>
                    )}
                </div>
            </div>
        </div>
    );
};

// Component for History List Item (Collapsible, Searchable)
const HistoryDisplay = ({ history, historyLoading, error, fetchHistory }) => {
    const [expandedIndex, setExpandedIndex] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');

    const toggleExpand = (index) => {
        setExpandedIndex(expandedIndex === index ? null : index);
    };

    const filteredHistory = history.filter(report => 
        report.filename.toLowerCase().includes(searchTerm.toLowerCase()) ||
        report.summary.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
        <div className="history-view">
            <div className="history-controls">
                <input
                    type="text"
                    placeholder="Search by filename or summary..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="search-input"
                />
                <button onClick={fetchHistory} className="refresh-button" disabled={historyLoading}>
                    {historyLoading ? 'Refreshing...' : 'Refresh'}
                </button>
            </div>
            
            {error && <p className="error">{error}</p>}
            {historyLoading && <p className="loading-message">Loading history...</p>}
            
            {!historyLoading && history.length === 0 && (
                <p className="no-feedback">No past reviews found in the database. Run a new review first!</p>
            )}
            
            {!historyLoading && history.length > 0 && (
                <div className="history-list">
                    <h2>Past Reviews ({filteredHistory.length} of {history.length})</h2>
                    {filteredHistory.map((histReport, index) => (
                        <div key={histReport.id} className="history-item">
                            <div 
                                className="history-header" 
                                onClick={() => toggleExpand(index)}
                            >
                                <span className="history-filename">
                                    {histReport.filename}
                                </span>
                                <span className="history-time">
                                    {formatDate(histReport.timestamp)}
                                </span>
                                <span className="expand-icon">
                                    {expandedIndex === index ? '▲' : '▼'}
                                </span>
                            </div>
                            
                            {/* Pass fetchHistory to ReviewDisplay so it can refresh the list after deletion */}
                            {expandedIndex === index && (
                                <ReviewDisplay report={histReport} fetchHistory={fetchHistory} />
                            )}
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
}

// Main App Component
function App() {
    const [file, setFile] = useState(null);
    const [report, setReport] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [fileName, setFileName] = useState("");
    const [view, setView] = useState('review'); // 'review' or 'history'
    const [history, setHistory] = useState([]);
    const [historyLoading, setHistoryLoading] = useState(false);

    // Function to fetch review history
    const fetchHistory = async () => {
        setHistoryLoading(true);
        setError(null);
        try {
            const response = await fetch('http://localhost:8000/api/history');
            if (response.ok) {
                const data = await response.json();
                setHistory(data);
            } else {
                const errorData = await response.json();
                setError(errorData.detail || "Failed to fetch review history.");
            }
        } catch (err) {
            setError("Could not connect to backend to fetch history.");
            console.error(err);
        } finally {
            setHistoryLoading(false);
        }
    };

    useEffect(() => {
        if (view === 'history') {
            fetchHistory();
        }
    }, [view]);

    // Function to clear the selected file and reset view
    const handleClearFile = () => {
        setFile(null);
        setFileName("");
        setReport(null);
        setError(null);
        // Reset file input element explicitly
        const fileInput = document.getElementById('file-upload');
        if (fileInput) fileInput.value = '';
    };


    const handleFileChange = (event) => {
        const selectedFile = event.target.files[0];
        setFile(selectedFile);
        setFileName(selectedFile ? selectedFile.name : "");
        setReport(null);
        setError(null);
    };

    const handleSubmit = async () => {
        if (!file) {
            setError("Please select a file first.");
            return;
        }

        setLoading(true);
        setError(null);
        setReport(null);

        const formData = new FormData();
        formData.append('code_file', file);

        try {
            const response = await fetch('http://localhost:8000/api/review', {
                method: 'POST',
                body: formData,
            });

            if (response.ok) {
                const data = await response.json();
                setReport(data);
                // Refresh history if we are currently viewing the history tab or expect a fresh list
                fetchHistory(); 
            } else {
                const errorData = await response.json();
                setError(errorData.detail || "An error occurred during review.");
            }
        } catch (err) {
            setError("Could not connect to the backend API. Please check your network and try again.");
            console.error(err);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="App">
            <header className="App-header">
                <h1>Synapse AI Code Reviewer</h1>
        
                <p className="description">Get an automated code review for your files.</p>
                
                {/* Navigation Tabs */}
                <nav className="tabs-container">
                    <button 
                        className={`tab-button ${view === 'review' ? 'active' : ''}`}
                        onClick={() => { setView('review'); setReport(null); }}
                    >
                        New Review
                    </button>
                    <button 
                        className={`tab-button ${view === 'history' ? 'active' : ''}`}
                        onClick={() => { setView('history'); setReport(null); }}
                    >
                        Review History
                    </button>
                </nav>

                <div className="content-container">
                    
                    {view === 'review' && (
                        <div className="review-view">
                            
                            {error && <p className="error">{error}</p>}

                            

                            <div className="upload-container">
                                <div className="file-input-group">
                                    <label htmlFor="file-upload" className="custom-file-upload">
                                        {fileName || "Choose File"}
                                    </label>
                                    <input id="file-upload" type="file" onChange={handleFileChange} />
                                </div>
                                
                                <div className="action-buttons-group">
                                    <button onClick={handleSubmit} disabled={loading || !file} className="review-button">
                                        {loading ? 'Reviewing...' : 'Get Review'}
                                    </button>
                                    
                                    {file && (
                                        <button onClick={handleClearFile} className="clear-button">
                                            Clear File
                                        </button>
                                    )}
                                </div>
                                {/* Description moved below the buttons for better flow */}
                                <p className="review-description-below">
                                    Upload your source code file (e.g., .py, .js, .java) above.
                                </p>
                            </div>
                            <div className="review-info-card">
                                <h3>Start Your Code Analysis</h3>
                                <p className="info-divider"></p>
                                <p className="info-text">
                                    Our AI assistant will instantly analyze the **structure, readability, best practices, and potential bugs**, providing a comprehensive report for your submission.
                                </p>
                            </div>
                            
                            <ReviewDisplay report={report} />
                        </div>
                    )}

                    {view === 'history' && (
                        <HistoryDisplay
                            history={history}
                            historyLoading={historyLoading}
                            error={error}
                            fetchHistory={fetchHistory}
                        />
                    )}
                </div>
            </header>
        </div>
    );
}

export default App;
